import { Button } from '@/components/ui/button';
import {
  FormControl,
  FormDescription,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { cn } from '@/lib/utils';
import { ImagePlus, RefreshCw, Trash2 } from 'lucide-react';
import { Control, Controller, FieldValues, Path } from 'react-hook-form';
import ImageUploading, { ImageListType } from 'react-images-uploading';
import { z } from 'zod';

export const imageUploadRules = (minUpload = 1) =>
  z
    .array(
      z.object({
        file: z
          .instanceof(File)
          .refine((file) => file.size <= 2 * 1024 * 1024, {
            message: 'File size must be less than 2MB.',
          })
          .refine(
            (file) =>
              [
                'image/jpeg',
                'image/jpg',
                'image/png',
                'image/webp',
                'image/HEIC',
              ].includes(file.type),
            {
              message: 'Only JPEG or PNG images are allowed.',
            }
          ),
        dataURL: z.string().optional(), // Optional, as it's generated by the library
      })
    )
    .optional()
    .refine((files) => !files || files.length <= minUpload, {
      message: 'Only one file is allowed.',
    });

interface ImageUploaderProps<TFieldValues extends FieldValues> {
  control: Control<TFieldValues>;
  name: Path<TFieldValues>;
  label?: string;
  description?: string;
  multiple?: boolean;
  maxNumber?: number;
  accept?: string[];
  maxFileSize?: number;
}

export function ImageUploader<TFieldValues extends FieldValues>({
  control,
  name,
  label = 'Upload Images',
  description = 'Drag and drop or click to upload',
  multiple = false,
  maxNumber = 1,
  accept = ['jpeg', 'jpg', 'png', 'gif', 'jpg', 'HEIC', 'webp'],
  maxFileSize = 2 * 1024 * 1024, // 2MB default
}: ImageUploaderProps<TFieldValues>) {
  return (
    <Controller
      control={control}
      name={name}
      render={({ field: { value, onChange }, fieldState: { error } }) => {
        return (
          <FormItem>
            {label && <FormLabel>{label}</FormLabel>}
            <FormControl>
              <ImageUploaderContent
                value={value}
                onChange={onChange}
                multiple={multiple}
                maxNumber={maxNumber}
                accept={accept}
                maxFileSize={maxFileSize}
                error={error}
              />
            </FormControl>
            {description && <FormDescription>{description}</FormDescription>}
            {error && <FormMessage>{error.message}</FormMessage>}
          </FormItem>
        );
      }}
    />
  );
}

interface ImageUploaderContentProps {
  value: ImageListType;
  onChange: (images: ImageListType) => void;
  multiple?: boolean;
  maxNumber?: number;
  accept?: string[];
  maxFileSize?: number;
  error?: any;
}

function ImageUploaderContent({
  value,
  onChange,
  multiple = false,
  maxNumber,
  accept = ['jpeg', 'jpg', 'png'],
  maxFileSize = 2 * 1024 * 1024,
  error,
}: ImageUploaderContentProps) {
  const handleChange = (
    imageList: ImageListType,
    addUpdateIndex: number[] | undefined
  ) => {
    // Validate file size and type
    const validatedImages = imageList.filter((image) => {
      const fileType = image.file?.type.split('/')[1];
      const fileSize = image.file?.size || 0;

      return accept.includes(fileType || '') && fileSize <= maxFileSize;
    });

    onChange(validatedImages);
  };

  return (
    <ImageUploading
      multiple={multiple}
      value={value}
      onChange={handleChange}
      maxNumber={maxNumber}
      acceptType={accept}
      maxFileSize={maxFileSize}
    >
      {({
        imageList,
        onImageUpload,
        onImageRemoveAll,
        onImageUpdate,
        onImageRemove,
        isDragging,
        dragProps,
        errors,
      }) => (
        <div className='w-full space-y-4'>
          {/* Upload Area */}
          <div
            {...dragProps}
            onClick={onImageUpload}
            className={cn(
              'border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-all duration-300 ease-in-out',
              error
                ? 'border-destructive'
                : isDragging
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-300 hover:border-blue-500 hover:bg-blue-50'
            )}
          >
            <div className='flex flex-col items-center justify-center space-y-2'>
              <ImagePlus
                className={cn(
                  'w-12 h-12',
                  error
                    ? 'text-destructive'
                    : isDragging
                    ? 'text-blue-500'
                    : 'text-gray-400'
                )}
              />
              <p
                className={cn(
                  'text-sm',
                  error ? 'text-destructive' : 'text-gray-600'
                )}
              >
                {isDragging ? 'Drop images here' : 'Click or drag images here'}
              </p>
              <p className='text-xs text-gray-500'>
                {`Supports: ${accept.join(', ').toUpperCase()}`}
              </p>
            </div>
          </div>

          {/* Error Handling */}
          {(errors || error) && (
            <div className='text-destructive text-sm space-y-1'>
              {errors?.maxNumber && <p>Maximum {maxNumber} images exceeded</p>}
              {errors?.acceptType && <p>Invalid file type</p>}
              {errors?.maxFileSize && (
                <p>File too large (max {maxFileSize / 1024 / 1024}MB)</p>
              )}
              {error && <p>{error.message}</p>}
            </div>
          )}

          {/* Image Preview Grid */}
          {imageList.length > 0 && (
            <div className='grid grid-cols-3 gap-4'>
              {imageList.map((image, index) => (
                <div
                  key={index}
                  className='relative group rounded-lg overflow-hidden shadow-md'
                >
                  <img
                    src={image.dataURL}
                    alt={`Uploaded ${index + 1}`}
                    className='w-full h-40 object-contain'
                  />
                  <div className='absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center space-x-2'>
                    <Button
                      variant='outline'
                      size='icon'
                      className='opacity-0 group-hover:opacity-100 transition-opacity'
                      onClick={() => onImageUpdate(index)}
                      type='button'
                    >
                      <RefreshCw className='w-4 h-4' />
                    </Button>
                    <Button
                      variant='destructive'
                      size='icon'
                      className='opacity-0 group-hover:opacity-100 transition-opacity'
                      onClick={() => onImageRemove(index)}
                      type='button'
                    >
                      <Trash2 className='w-4 h-4' />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Optional Remove All Button */}
          {imageList.length > 1 && (
            <div className='flex justify-end'>
              <Button
                variant='ghost'
                onClick={onImageRemoveAll}
                className='text-red-500 hover:bg-red-50'
                type='button'
              >
                <Trash2 className='mr-2 w-4 h-4' /> Remove All
              </Button>
            </div>
          )}
        </div>
      )}
    </ImageUploading>
  );
}
